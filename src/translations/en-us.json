{
  "Index.content": "MapRoulette is a micro-task platform for OpenStreetMap. [MapRoulette.org](https://maproulette.org/) gives you small **Tasks** you can complete in under a minute to improve OpenStreetMap. Anyone can create groups of tasks, called **Challenges**, that the community can complete together.\n\nBesides the website maproulette.org, there is also a full API that you can use to integrate MapRoulette with your own tools.\n\nOn this wiki, you will find all the resources you need to use MapRoulette.org, create and manage Challenges, see statistics and interact with the MapRoulette API.\n\nHelp is welcome! If you have suggestions for this documentation, or don't understand how something works, please email us at [maproulette@maproulette.org](mailto:maproulette@maproulette.org) or [open a new issue](https://github.com/osmlab/maproulette3/issues).",
  "Documentation.title": "Documentation",
  "Documentation.content1": "Welcome to the MapRoulette documentation and learning site!",
  "Documentation.content2": "If you'd like to get mapping, visit our application page at [MapRoulette.org](https://maproulette.org/)\n\nOur community continues to grow quickly! If you'd like to help contribute to MapRoulette's documentation, please visit our [Repository](https://github.com/maproulette/docs) for instructions.  Thank you in advance.",
  "BulkEditingChallenges.content1": "Project owners can now **Bulk-edit** challenges within the same project.  While this feature isn't as robust as editing a single challenge individually, there are a few fields that allow you to edit multiple challenges for quality of life purposes.\n\n**Keep in mind that this feature, for most fields, will overwrite the original data of each challenge if you choose to utilize the field. Since each challenge can have different data, you will not have context on this page of what you are overwriting.  Use at your own risk.  Fields that you leave alone will leave the original data the way it is.**\n\n## Go to your Project's admin page and select challenges\n\nSimply go to a project admin page.  In the challenges widget, select the graph icon to the right of each challenge you would like to edit simultaneously.",
  "BulkEditingChallenges.content2": "You can also choose to \"select-all\" by clicking the graph icon at the top of the list.\n\n## Bulk Edit Page\n\nNext, select the gear icon on the top right and select \"Edit Selected\"",
  "BulkEditingChallenges.content3": "You'll be directed to the bulk edit page.\n\n## Remove a challenge from Bulk Edit\n\nYou should see a list of the challenges you will be editing simultaneously.  If you change your mind on any of the challenges, but don't want to go back and re-select them, you can click the \"X\" symbol to the right of the challenge name.",
  "BulkEditingChallenges.content4": "## Bulk Editing Guidelines\n\n1. Any fields you choose to use for bulk editing will be used to **overwrite** the data that is on each challenge.\n\n2. Any fields you leave alone on the bulk edit page will not do anything to the existing challenge data.\n\n## Submitting A Bulk Edit\n\nOnce you've proposed all of the changes you need on the form, press Submit and you will be presented with a confirmation modal that indicates all of the changes that will be made on each challenge.",
  "BulkEditingChallenges.content5": "**Cancel Edit** will allow you to go back to the form and make any additional changes you like.  Additionally you can choose to abandon all edits by clicking \"Cancel Edit\" on the bulk edit page.\n\n**Submit Bulk Edit** will proceed with the submission of edits on each challenge.",
  "ChallengeComments.content1": "In an effort to provide more tooling for users to contact challenge owners, **Challenge Comments** have been added as a feature in addition to Task Comments.  This allows users to address issues or assessments that could be systemic beyond just one task, and to get clarity from the owner or recommend changes without need to flag or report a challenge.  \n\nTo navigate to a challenge's comments and to post a comment, simply go to a challenge overview page like [this one](https://maproulette.org/browse/challenges/40609).  Then click on the link \"Get In Touch\".",
  "ChallengeComments.content2": "## Submitting a comment\n\nMessages you submit here will automatically notify the challenge owner, so there's no need to include the challenge owner's tag.  However, non-owners will still need to be tagged in the comment if you want them to be notified.\n\n## Task Specific Comments\n\nTask specific comments can be viewed here and will be included in the challenge comment feed by simply clicking the \"Task Comments\" checkbox.",
  "ChallengeFlagging.content1": "Challenge flagging allows mappers to report any questionable encounters within a challenge that did not meet quality standards.\n\nSee original post and credits on our blog [here](https://blog.maproulette.org/2023/01/23/introducing-our-flag-report-a-challenge-feature/)!\n\n**Please be aware that Challenge Flagging is one of a set of features that assists mappers with reaching out to challenge owners.  Flagging a challenge may not be necessary, so please review the list of features and our recommendations for [Reporting A Challenge](/documentation/reporting-a-challenge) depeding on your specific needs.**\n\nUpon coming across something we want to flag in a challenge, go to the challenge details page that belongs to the challenge, there you will be able to see a flag icon next to the challenge name.",
  "ChallengeFlagging.content2": "Simply click on the flag icon, an email modal will appear to flag this challenge. Please include your email address, a flag description, and make sure you check [ I have attempted to contact the challenge creator ] before proceed. Click on the [Flag Challenge] button to submit a flag. This will open an issue in Maproulette’s [challenge-reports repository](https://github.com/maproulette/challenge-reports/issues) on GitHub and generate a message in the comment section of this challenge.",
  "ChallengeFlagging.content3": "Once the challenge is being successfully flagged, the flag icon will be filled red.",
  "ChallengeFlagging.content4": "Clicking on the flag icon will redirect you to the issue’s page on GitHub.",
  "ChallengeFlagging.content5": "You could also view information related to this issue in the comment section of this challenge( by clicking on Get In Touch).",
  "ChallengeFlagging.content6": "Please note that only logged in user is able to flag a challenge. And if an issue has already been flagged by a user, we can only flag the same challenge again once that issue has been resolved.\n\nWe hope flag feature will help maintain and improve the overall quality of challenges on MapRoulette by passing our users abilities to regulate.",
  "ChallengeInstructionsTemplating.content1": "MapRoulette supports [mustache-tag replacement](/documentation/mustache-tag-replacement/) in Challenge Instructions, as well as special short codes that can be used to embed basic form fields, make data easily copyable to the user's clipboard, etc.\n\n## Basic Form Fields\n\nIt may occasionally be useful to allow mappers to provide to challenge managers some additional information as they work through tasks. MapRoulette supports special short codes that offer the ability to embed very basic form fields in Challenge Instructions, which mappers can optionally complete for each task. Responses are included in CSV and GeoJSON [exports](/documentation/exporting-challenge-data/) of the challenge.",
  "ChallengeInstructionsTemplating.content2": "To add form fields, simply use one or more of the short codes documented below in your Challenge Instructions. The short-codes will be replaced with inline form fields.\n\n> Note: form fields used to be represented by three curly braces instead of as short codes using square brackets. That older notation is still supported for backwards compatibility with existing challenges, but is considered deprecated and should no longer be used\n\nForm responses for each task will be automatically included in CSV and GeoJSON exports of challenge tasks from challenge management. The name you assign to each form field will be used as the column name in the exported CSV or property name in the exported GeoJSON.\n\n### Checkbox field:",
  "ChallengeInstructionsTemplating.content3": "This will create a checkbox field named myCheckbox\n\nThe label can also include basic markdown, including mustache tags referencing task or workspace properties\n\n### Select (multiple-choice) field:",
  "ChallengeInstructionsTemplating.content4": "Creates a select field named myDropdown with three choices (foo or bar or baz) plus an empty choice\n\nThe label can also include basic markdown, including mustache tags referencing task or workspace properties\n\n## Other Useful Short Codes",
  "ChallengeInstructionsTemplating.content5": "Causes a clipboard button to be rendered immediately after the specified text that, when clicked, will copy the text to the user's clipboard. The text can also include mustache tags referencing task or workspace properties, which will be substituted, but **cannot** include markdown.",
  "ChallengeVisibilityDiscovery.content1": "Challenges are publicly discoverable (e.g. through search results) only if both the challenge *and* its parent project are set to visible. If either is not visible, the challenge will not be discoverable and will not appear in search results.\n\nVisibility only affects discoverability: mappers can still access a challenge directly if they have the public URL to that challenge. This makes it possible to share challenges that are not otherwise discoverable.\n\n| Project-visible Setting | Challenge-visible Setting | Challenge is Discoverable? |                                                \n|:------------------------|:--------------------------|:---------------------------|\n| Yes                     | Yes                       | Yes                        |\n| Yes                     | No                        | No                         |\n| No                      | Yes                       | No                         |\n| No                      | No                        | No                         |\n\n> Note: virtual projects do not affect visibility of their contained challenges. Only a challenge's standard parent project is considered when determining discoverability",
  "CreatingChallenge.content1": "Creating a challenge starts with a good challenge idea. Good challenges have tasks that:\n\n- Are easy to solve (typically less than one minute)\n- Do not require local knowledge\n- Involve only one or two OSM objects\n\nHere's an [example challenge](https://maproulette.org/mr3/browse/challenges/3253) that meets that criteria. We will ask mappers to review `motorway_junction` nodes in the United States that have name `tags`. This is uncommon in the U.S. Often mappers will add a name tag that has the destination information on it, so the information renders on the map:\n",
  "CreatingChallenge.content2": "This [Overpass query](https://overpass-turbo.eu/?Q=area%5Bname%3D%22United%20States%20of%20America%22%5D-%3E.a%3B%0Anode%5B%22highway%22%3D%22motorway_junction%22%5D%5B%22name%22%5D(area.a)%3B%0Aout%20meta%3B%0A&C=40.66202;-111.87756;12) selects all these nodes.",
  "CreatingChallenge.content3": "With that query in hand, I can go to MapRoulette and click ‘Create’ at the top. This takes you to your MapRoulette Projects page. By default you will only have one Project. Click on its name to select it as the home for your new Challenge. At the top of the Project page, you will find the ‘Add Challenge’ link, click that to start the wizard to add a new Challenge.",
  "CreatingChallenge.content4": "The Wizard has 4 pages, but only the first two require your full attention\n\nOn the first page you enter the title, description and instruction for your challenge, as well as some metadata that will be used to help others find it and identify edits made by mappers using the Challenge:\n\n- **Visible** Whether the Challenge will be listed. If no, you can still share the Challenge URL and it will work.\n- **Name** A descriptive name for the challenge. I used Review named motorway junctions in USA. A good title describes what the challenge is about is a few words.\n- **Description** Some text to describe in more words what the challenge is about. This field supports markdown and appears in the expanded challenge information when mappers browse for interesting challenges:\n",
  "CreatingChallenge.content5": "I used Motorway junction nodes are not commonly tagged with name. This challenge asks mappers to review those nodes, removing the name where it’s not applicable.\n\n- **Blurb** Feel free to skip this. An even shorter description of what the challenge is about. I used Review named motorway junction nodes\n- **Instruction** This is perhaps the most important text. Here you tell mappers exactly what the task is you want them to perform. Be specific and use links (this field supports markdown as well) to the OSM wiki or other external sources where needed. This text is shown next to the map of the task location. I used This `motorway_junction` node has a `name` tag. This is uncommon, [see the OSM wiki](https://wiki.openstreetmap.org/wiki/Tag:highway=motorway_junction#Name_and_number) for details. If this name tag does not represent a ‘name of the junction or interchange’, the name tag should be removed. If you’re not sure, you can skip the task.. Note how I use markdown features to make the instructions easy to read and comprehensive.\n- **Changeset Description** This field will be used to pre-fill the changeset description in the editor ( A URL linking to the challenge description and task is automatically added to the changeset comment, but only when the challenge is discoverable ). I used reviewing named motorway junctions. A `#maproulette` hashtag will be added unless you change that default setting below.\n- **Changeset Source** This field will be used to pre-fill the changeset source field in the editor. If your task involves using any external data, you should list it here. I used maproulette;overpass.\n- **Difficulty** You can leave this at ‘Normal’ unless your tasks are particularly easy or hard. We may change this system in the near future.\n- **Category** This helps the user find challenges they are interested in. There is a dropdown menu on the main Challenge list that lets users narrow down the list by category. For this challenge I used Roads / Pedestrian / Cycleways.\n- **Keywords** These also help users find interesting challenges. They are used in the free text search field. I used `junction`, `name`, `motorway` and `exit`.\n\nWhen all this is filled out, you can proceed to screen 2, where you supply the source data for the tasks. This can be a GeoJSON file or URL, or an Overpass query. If you use an Overpass query, make sure you don’t use any Overpass Turbo specific language such as `geocodeArea:...`. Test your query in Overpass Turbo first.\n\nThe final two screens let you add rules to prioritize certain tasks over others based on OSM tags, and let you define some view related settings for your challenge. The defaults are sensible but please do review them and tweak as needed. Make sure that the query only returns the nodes or ways that you want mappers to review, and ideally the number of objects returned should be no more than a couple thousand.\n\nWhen you click ‘Finish’, MapRoulette will query Overpass in the background and populate your challenge. Depending on how heavy the Overpass query is, this can take a few seconds to a couple of minutes. When it finishes, you will see a map with your tasks, a complete list of tasks and some more challenge information.\n",
  "CreatingChallenge.content6": "You can now click **Start** on the top to go directly to your challenge and try it out!",
  "CreatingCooperativeChallanges.content1": "Cooperative Challenges allow in-progress (uncommitted) mapping work to be packaged with tasks so that mappers don't have to do all the work themselves from scratch. When a mapper chooses to edit the task in MapRoulette, the in-progress work will automatically be loaded into the mapper's editor so that they can verify and complete the work as needed.\n\n> Note: JOSM is currently the only supported editor for Cooperative Challenges, but integration with additional editors is under way\n\nAside from the initial editing work being automatically loaded into the mapper's editor, the mapping workflow for Cooperative tasks is otherwise identical to normal tasks: the mapper still chooses to Edit the task, they still perform the editing work in their editor, they still upload and commit their work to OSM through their editor, and they still mark the task as Finished or another appropriate status in MapRoulette when complete.\n\n### Creating Cooperative Challenges\n\n#### With the `mr-cli` utility (recommended)\n\nThe simplest way to create cooperative challenges is with the [mr-cli](https://www.npmjs.com/package/@maproulette/mr-cli) command-line utility, which can generate challenges from saved JOSM (.osm) or OSM Change (.osc) files. See the tool's documentation for details and examples of use.\n\n#### With GeoJSON\n\nCooperative challenges can also be created by including additional data with each task in the GeoJSON, including an [OSMChange (.osc)](https://wiki.openstreetmap.org/wiki/OsmChange) file that represents the in-progress work that is to be loaded into the mapper's editor for the task. The additional data should be included in a `cooperativeWork` object associated with each task's `FeatureCollection` in the challenge's [line-by-line GeoJSON](/documentation/line-by-line-geojson/) file.\n\n> :warning: Only [line-by-line GeoJSON](/documentation/line-by-line-geojson/) is supported for cooperative challenges. If you use a traditional GeoJSON format, your cooperativeWork section will simply be ignored and you will end up with normal tasks instead of cooperative tasks\n\nThe structure of the `cooperativeWork` object is designed to be flexible to support various options, formats, and encodings in the future, but at the moment only a very specific combination of values is supported.\n\nThe following example demonstrates the structure, shown here over multiple lines for readability.",
  "CreatingCooperativeChallanges.content2": "> Note: the file contents must be Base64-encoded using the Base 64 Alphabet as specified in table 1 of [RFC 4648](https://www.ietf.org/rfc/rfc4648.txt) (sometimes referred to as \"basic\" Base64 encoding)\n\nThe `features` for each task are used for all the usual things by MapRoulette (rendering the task on maps, geographical indexing, task prioritization, searching for tasks by feature properties, etc.) but are _not_ incorporated into editing -- only the osc file is sent to the editor.\n\n### Creating [Tag Fix Challenges](https://learn.maproulette.org/en-us/documentation/tag-fix-challenges)\n\nIf your changes consist purely of tag fixes, an alternative _Tag Fix_ (formerly quick fix) style cooperative challenge can be created instead. MapRoulette will present the proposed tag changes to mappers during task completion and allow them to approve or reject the changes within MapRoulette, as well as modify the tags if needed. Approved changes are submitted directly to OSM by MapRoulette itself, removing the need for external editors.\n\n#### With the `mr-cli` utility (recommended)\n\nAs with standard cooperative challenges, the easiest way to create a Tag Fix challenge is with the [mr-cli](https://www.npmjs.com/package/@maproulette/mr-cli) command-line utility. See the tool's documentation for details and examples of use.\n\nSee also [this post on the MapRoulette blog](https://blog.maproulette.org/2022/11/07/tutorial-tagging-parkingsurface-efficiently-with-a-maproulette-tag-fix-challenge/) for a complete example of how to make a tag-fix challenge using the `mr-cli` tool.\n\n#### With GeoJSON\n\nTo aid with backwards compatibility, the GeoJSON structure of Tag Fix tasks is extremely similar to that of the old quick fix tasks, with only a few minor changes to the data envelope being required.",
  "CreatingCooperativeChallanges.content3": "#### Supported GeoJSON Operations\n\nA Tag Fix consists of one _independent_ (or parent) operation which includes one or more embedded _dependent_ (or child) operations.\n\n> Note: For ease of backward compatibility, the Tag Fix operations are taken from a subset of the old quick fix operations and work (and are structured) identically\n\n#### Independent Operations\n\n> Note: Any OSM ids referenced in an operation must be of the form of `elementType/numericId`, e.g. `node/123456789`\n\n**modifyElement**\n\nUpdates an existing OSM element with a series of dependent operations on tags that will be applied in the order they appear. `data` should consist of an `id` and `operations` array with dependent operations to be performed.\n\nExample:",
  "CreatingCooperativeChallanges.content4": "#### Dependent Operations\n\n**setTags**\n\nSets the value of one or more tags on the enclosing OSM element. This operation will add the tag if it does not yet exist on the element, or update the value of an existing tag if it does exist. `data` should be an object with tag names as keys.\n\n> Unlike an OSM changeset, which often requires a complete snapshot of the element data to be provided, a tag fix is intended to capture only the actual changes required to complete the task\n\nExample:",
  "CreatingCooperativeChallanges.content5": "**unsetTags**\n\nRemoves one or more tags from the enclosing OSM element. This operation will\ndelete the tag from the OSM element if it exists, or silently do nothing if it\ndoes not. `data` should be an array of tag names to remove.\n\nExample:",
  "CreatingCooperativeChallanges.content6": "### See also\n\n* [Adding Microsoft Building Footprints To OSM With MapRoulette: Why And How](https://www.openstreetmap.org/user/mvexel/diary/399229) walks you through an example of creating a Cooperative Challenge",
  "DefiningTaskSourcedData.content1": "When you create Tasks from a GeoJSON source, MapRoulette asks you to define a date on which the tasks are sourced. This allows you to let mappers know the vintage of the original source data that the task was created from.",
  "DefiningTaskSourcedData.content2": "By default, the date is set to today. When your GeoJSON is from an external source, this is almost certainly wrong. Please try to determine the vintage of the external data as best you can. This can be a publication date, which may be published on the source's web site. This can help mappers to decide if the Task data is more current than what is already in OSM.",
  "DiscoveringChallenges.content1": "How do you find things that you are interested in fixing? MapRoulette offers a number of ways that we'll talk about on this page.",
  "DiscoveringChallenges.content2": "# Sorting\n\nThe Challenge list has a default 'Smart' sorting strategy that puts Featured and Popular Challenges at the top of the list. Featured Challenges are interesting Challenges that are hand-picked by the OSM community, and Popular Challenges are the ones that have seen the most activity recently. You can use the dropdown menu at the top of the Challenge list to sort the list by other criteria.",
  "DiscoveringChallenges.content3": "# Filtering\n\nMapRoulette offers powerful filters to help you uncover Challenges you may be interested in. There are five types of filters at the moment: Topic, Difficulty, Custom Categorization Keywords, Text, and Location.\n\nYou can combine these filters as you wish.\n\n## By Topic\n\nThe creator of a Challenge will assign a Topic to it from a pre-defined list. For example, a Challenge that looks at fixing coastlines will have the topic 'Water', and a Challenge that looks at fixing the tagging of Burger King restaurants will fall under 'Points / Areas of Interest'. You can select one of these Topics to quickly narrow down the list to only show the relevant Challenges.",
  "DiscoveringChallenges.content4": "## By Difficulty\n\nWhen someone creates a Challenge, they decide if this is an Easy, Medium, or Expert level Challenge. Tasks in an Easy Challenge should be fixable by mappers with little experience. Working on Expert level Challenges requires advanced mapping skills and intimate familiarity with OSM tagging practices.",
  "DiscoveringChallenges.content5": "## By Custom Categorization Keywords\n\n When a challenge is created, the challenge owner has the opportunity to create categorization keywords. This filter allows users to create custom keyword filters that can be used to filter for challenges with matching categorization keywords.",
  "DiscoveringChallenges.content6": "The categorization keywords being sorted through are declared here in the challenge creation form.",
  "DiscoveringChallenges.content7": "## By Text or Id\n\nYou can type any text you want into the text search box at the top to narrow down the list by any phrase you want. The filter will look at text in the titles and descriptions when searching by Challenge or Project, and will search for a task by its Id when searching for a task.",
  "DiscoveringChallenges.content8": "## By Location\n\nMapRoulette Challenges cover the entire world. But if you only want to filter for challenges in a particular location, you can use the location to filter for tasks based on a country, state, city, road, or various other landmarks related to the challenges you are wanting to find.",
  "DiscoveringChallenges.content9": "If you allow browser geolocation, you can also use 'Near Me' to focus on Challenges that cover your current location.\n\n> The location filters use the Challenges' bounding boxes to match location. It is not guaranteed that all Challenges in the results list will actually have Tasks within the map extent.\n\nSee also [Virtual Challenges](/documentation/editing-virtual-challenges/) for a different way to work on all Tasks within a small geographical area.",
  "EditingVirtualChallenges.content1": "The core of MapRoulette's fuctionality revolves around the concept of a ‘Roulette’ wheel.  The wheel spins and you get a random task! What is nice about this is that you get to improve the map all over the world, and see what the map looks like in faraway places.\n\nBut what if you want to focus on improving one specific area? MapRoulette makes this possible too, with Virtual Challenges.\n\nA Virtual Challenge is a Challenge that consists of a custom group of Tasks in a small area. You can create a Virtual Challenge quickly and easily yourself, based on the Tasks that are already in MapRoulette. Here’s how you go about this.\n\nFirst navigate the map to show the area you are interested in by. If you zoom in far enough, you will see individual tasks appear on the map.",
  "EditingVirtualChallenges.content2": "You can apply filters to further narrow down the amount of Tasks. For example, you could add a filter to only work on Easy tasks.\n\nOnce you’re satisfied, you select the ‘Lasso’ button on the right side of the map, and draw a circle around the area of tasks you want to have in your virtual challenge. Then, MapRoulette will ask you to give you new Virtual Challenge a name.",
  "EditingVirtualChallenges.content3": "Then, MapRoulette will ask you to give you new Virtual Challenge a name.",
  "EditingVirtualChallenges.content4": "After you set the name, you will be taken to the first random task in you Virtual Challenge. At the top of the Challenge List, you will find a link you can share with others to work on the Tasks together!",
  "CommentShortCodes.content1": "MapRoulette offers a \"short-code\" mechanism in Task comments for providing enhanced references to things like OpenStreetMap nodes/ways/relations and zoom/lat/lon map viewports. Short-codes are always surrounded by brackets (`[` and `]`).\n\nThe following short-codes are currently supported:\n\n## Reference an OpenStreetMap element (node, way, or relation) -- or multiple elements together\n\nTo reference a node, way, or relation, use `n`, `w`, or `r` followed by an optional space or slash, followed by the OSM id.\n\n> Note: `node`, `way`, or `relation` can also be fully spelled out, if preferred\n\n**Examples:**\n\nReference node 12345689: `[n123456789]` (or, equivalently, `[n 123456789]` or `[n/123456789]`)\n\nReference way 24681012: `[w24681012]` (or, equivalently, `[w 24681012]` or `[w/24681012]`)\n\nMultiple elements can be combined in a single short-code by separating them with commas:\n`[n123456789, w24681012]`\n\n**Behavior:**\n\nOSM Element short-codes will be displayed as browser links to an Overpass Turbo page that will render the referenced element(s). However, if the reader has configured JOSM as their current MapRoulette editor, then clicking on the link will instead load the referenced elements into JOSM.\n\n## Reference a map viewport\n\nTo reference a map viewport of a specific location, use `v` followed by an optional space or slash, followed by slash-separated zoom, latitude, and longitude.\n\n> Note: `viewport` can also be fully spelled out, if preferred\n\n**Examples:**\n\nReference location 37.11777, 126.99754 at zoom 17: `[v17/37.11777/126.99754]` (or, equivalently, `[v 17/37.11777/126.99754]` or `[v/17/37.11777/126.99754]`)\n\nFor convenience, a complete OSM map url can also be used instead, e.g. `[https://www.openstreetmap.org/#map=17/37.11777/126.99754]` -- notice that it is *not* started with a `v` in that case\n\n\n**Behavior:**\n\n\nViewport short-codes will be displayed as links to OpenStreetMap for the referenced location at the specified zoom. However, if the reader has configured JOSM as their current MapRoulette editor, then clicking on the link will instead zoom JOSM to the referenced viewport.\n\n\n## Mention other users\n\nTo \"mention\" a user, use `@` followed by their username, e.g. `[@username]`. For simple usernames that don't contain any spaces or punctuation, a simplified `@username` (ommitting the square brackets) can also be used. The user will receive an in-app notification that they've been mentioned in a comment, unless they've chosen to disable those notifications.\n\n**Examples:**\n\nMention user \"abc\" (no spaces or punctuation): `Hello [@abc]` or `Hello @abc`\n\nMention user \"example user\" (with spaces): `Hello [@example user]`\n\nMention user \"example.user\" (with punctuation): `Hello [@example.user]`\n\n\n**Behavior:**\n\nBy default, the mentioned user will receive an in-app notification informing them that they've been mentioned in a comment. Depending on how the user has customized their notification settings, however, they may also receive an email notification (either immediately or rolled up into a daily digest of notifications) or the notification may be ignored completely.\n",
  "ExportingChallengeData.content1": "MapRoulette allows challenge managers to export their challenge data in either CSV format (suitable for spreadsheet applications) or as GeoJSON.\n\nTo export your data from the Challenge Management screen, simply click the cog wheel icon at the top-right of the tasks table and choose one of the Export options from the menu. By default, all timestamps in the export are represented in UTC, but that can be customized on a per-export basis by selecting your desired timezone from the Export menu prior to choosing an export option.\n",
  "FilteringTaskListByProperties.content1": "When analyzing your challenges as a manager, it can sometimes be useful to filter tasks by property values (such as OSM tags). It has been possible since v3.4.4 of MapRoulette to filter tasks by the value of a single task property, but v3.5.3 brings the ability to create compound filtering rules that can AND and OR together multiple properties to achieve fine-grained filtering.\n\nWhen managing a challenge, you can get started by clicking the \"Filter by Property\" control on the tasks table. You'll be asked to select the data type of the property: text, number, or a special \"compound rule\" if you wish to do a compound search involving multiple properties.\n\nIf you chose text or number, you'll then be asked to choose the property name, a comparison operator, and a value to compare against.\n\n> Note: To help with choosing a property name, MapRoulette offers a dropdown of all property names it discovered on tasks in the challenge. It does **not** restrict the offered properties based on the data type you chose.\n\nFor example, if you were looking for motorways, you might choose the `highway` property, the `equals` operator, and then enter `motorway` for the value.\n\nThe comparison operators on offer depend on the data type you choose. Text properties can use textual operators like `equals` and `contains` while numeric properties can use operators like `=` and `>` or `<` for comparison.\n\n> Note: it's important to choose the correct data types for the properties you're filtering against. However, if you have numeric data represented as strings in your GeoJSON (e.g. `population: \"500\"`), MapRoulette will attempt to perform numeric comparisons if you choose a Number type for the property despite it technically being a string/text.\n\nIf you wish to filter against multiple properties simultaneously, choose \"compound rule\" for the type. This will present you with boxes for two properties along with an option to AND or OR them together. If you choose AND then _both_ property comparisons must match on a task for the task to be included in your filter results. If you choose OR then the task will be included if _either_ of the property comparisons match.\n\n> As of v3.5.7, MapRoulette offers an option for including multiple, comma-separated filter values for a single property so that compound rules can be avoided for the common case of matching any one of multiple values. These values will be OR'ed together.\n\nFor example, if you wanted motorways with at least 6 lanes, you would choose \"compound rule\", set the first rule to Text with `highway` `equals` `motorway`, set the second rule to Number with `lanes` `>` `5`, and choose to AND them together.\n\nIf you wish to filter against more than 2 properties, then you'll need to nest multiple compound rules.\n\nAs of v3.5.5, you no longer need to setup a compound rule if you simply wish to compare a property against multiple values (e.g. `highway` `equals` `motorway` or `trunk`). You can click the \"Add Value\" control to add multiple values to include in the comparison.\n\nThe screenshow below shows the setup of a compound search for tasks with a `name` property of `TransCanada Highway` and the `highway` property set to either `motorway` or `trunk`.\n",
  "Following.content1": "MapRoulette supports basic Following capability whereby users can follow other users to easily keep abreast of their MapRoulette activity. While all MapRoulette activity is public, the activity of users you follow is pulled together into a single activity timeline for easy viewing. Following is currently managed through the optional Follow widget on the Dashboard page.\n\nGet started by visiting the Dashboard page and adding the Follow widget if you haven't already. There are three tabs: Activity, Following, and Followers.\n\n* The Activity tab shows all MapRoulette activity from users you are following. By default, similar consecutive activity entries are grouped together into a single item with a count. You can uncheck the \"Group\" option if you wish to see a separate item in the timeline for each recorded activity entry.\n\n* The Following tab allows you to view the users you are following, unfollow them, and follow additional users.\n\n* The Followers tab shows users who are following you, and contains options to follow them back or even block them (and unblock them). Blocked users will continue to see that they are following you, but will no longer see your activity in their Activity tab. Note, however, that MapRoulette activity is public so they may still discover aspects of your activity through other areas of the site.\n\n### Disallowing All Followers\n\nIf you do not wish anyone to be able to follow you, you can visit your User Settings and set the Allow Following option to No. It's also possible to block individual followers via the Follow widget on the Dashboard page (see above).",
  "GistsForRemoteGeojson.content1": "It's possible to use a Github gist to host your challenge GeoJSON remotely. Here are a few tips to help you get started:\n\n* Use a `.json` file extension if you want Github to treat the file as GeoJSON with a nice preview (`.geojson` will not work).\n* It's okay to opt for a \"secret\" gist if you prefer. Anyone with the URL can still view a secret gist.\n* When creating your challenge on MapRoulette, you'll need to select the Remote URL option and provide a URL to the **raw** gist content. By default, when you click on the Raw button for your gist, Github gives you a link to that specific version of the gist. To get a link that will always serve up the most recent version, remove the identifier in between `raw/` and the filename in the URL. For example, you would change:\n```\nhttps://gist.githubusercontent.com/youruser/abcd123/raw/efgh456/yourTasks.json\n                                                        ^^^^^^^^ remove\n```\nto:\n```\nhttps://gist.githubusercontent.com/youruser/abcd123/raw/yourTasks.json\n```\n* Github caches the latest version of your gist, so you may need to wait 5-10 mins after editing your gist before the cache is updated and the latest raw content is served. If you're planning to [rebuild your challenge tasks](/documentation/rebuilding-challenge-tasks/) from updated data, make sure the latest version is being served before asking MapRoulette to rebuild your challenge.",
  "LineByLineGeojson.content1": "The preferred representation of GeoJSON for MapRoulette challenges is a streaming-friendly, [RFC 7464](https://tools.ietf.org/html/rfc7464)-compliant \"line-by-line\" format, wherein each task appears on its own line in the file, represented by a standalone [FeatureCollection](https://tools.ietf.org/html/rfc7946#section-3.3). Some MapRoulette features and capabilities are only available when the line-by-line format is used.\n\nWith a line-by-line format, only one line of the file need be pulled into memory and parsed at a time, making it possible to support very large files. And, since each task is represented by a FeatureCollection, it's possible to support multiple individual Features with their own properties (and thus OSM ids and tags) within the task. Traditional GeoJSON files do not confer these advantages.\n\nAs of MapRoulette v3.6.5, each line of the file should begin with a [RFC 7464](https://tools.ietf.org/html/rfc7464) record separator (RS) character (1E hex), represented in the JSON example below as",
  "LineByLineGeojson.content1.1": "As a simple example, a line-by-line GeoJSON file with three tasks might look like this:",
  "LineByLineGeojson.content2": "> Note: Older versions of MapRoulette did not support the RFC 7464 record separator, which could lead to indeterminate outcomes in some situations. MapRoulette will still accept older line-by-line files that omit the RS, but the mentioned problems will continue to potentially affect processing of those files. It is highly recommended that any new line-by-line GeoJSON files make use of the record separators unless compatibility with an older version of MapRoulette is absolutely required.\n\nMapRoulette automatically detects the line-by-line format when processing GeoJSON files, so there is no need to use a special file extension or otherwise indicate that a file uses line-by-line formatting.",
  "MapLayerManagement.content1": "Maproulette retrieves its map layer data from the [OSM Editor Layer Index](https://github.com/osmlab/editor-layer-index) at build time and, by default, makes available all global layers marked as \"default\" layers in the index (including overlays). OpenCycleMap, which is not currently a default in the index, is also configured to be included for backwards compatibility.\n\nIt's possible, on a given server installation, to both choose additional layers from the OSM Editor Index and to add custom map layers that aren't present in the index. It's also possible to separately set (or override) API keys for both custom and indexed layers.\n\n## Including Additional Layers from the OSM Editor Layer Index\n\nTo include additional layers already found in the OSM Editor Layer Index, simply add the desired layer ids to the `REACT_APP_ADDITIONAL_INDEX_LAYERS` configuration variable in the `.env` file. See the .env file for additional documentation. If any of those layers require API keys, then see below for how to specify keys.\n\n## Adding Custom Layers\n\nCustom layers can be added by defining them in the `src/customLayers.json` file. The contents of the file should be structured similarly to the `src/defaultLayers.json` file.\n\n> Note that `src/defaultLayers.json` is freshly generated and overwritten during each build, so it should not be modified directly\n\nHere's an example that adds the Mapbox Satellite Streets layer:",
  "MapLayerManagement.content2": "## Adding API Keys for Indexed or Custom Layers\n\nAPI Keys can be provided for both custom layers and layers from the OSM Editor Index by specifying them in the `REACT_APP_MAP_LAYER_API_KEYS` configuration variable in the `.env` file. You'll need to supply the layer id, the name of the substitution variable in the URL that is to be replaced with the key, and the key itself. See the .env file for additional documentation.\n\n## Disabling Stock Layers\n\nIf you want full control over exactly which map layers are displayed, you can disable the stock layers by setting `REACT_APP_DEFAULT_MAP_LAYERS='disabled'` in your `.env` file. Then you can add exactly the layers you want (either from the editor index or custom, as discussed above).\n\nNote that this does not affect the overlays, such as Mapillary or OpenStreetCam, which can be enabled or disabled individually (discussed below).\n\n## Specifying a Default Map Layer\n\nMapRoulette comes configured to use the OpenStreetMap Standard layer as the default map layer, but you can override that by setting the `REACT_APP_DEFAULT_MAP_LAYER_ID` configuration variable in the `.env` file. See the .env file for additional documentation.\n\n## Controlling the Overlay Layers\n\nThe following overlays can be individually enabled or disabled via `.env` file configuration variables.\n\n* OpenStreetCam imagery is enabled by default, but can be disabled by setting `REACT_APP_IMAGERY_OPENSTREETCAM='disabled'`\n\n* Mapillary is disabled by default, but can be enabled with a Mapillary client/api key by setting `REACT_APP_MAPILLARY_API_KEY='your-client-key'`\n\n* The OSM Data layer is enabled by default, but can be disabled by setting `REACT_APP_OSM_DATA_OVERLAY='disabled'`",
  "Markdown.content1": "MapRoulette supports a variant of Markdown for marking up or styling text. Markdown can be used in most places where long-form text can be entered, such as task comments, challenge descriptions, challenge instructions, etc.\n\nThe variant supported by MapRoulette is inspired by [Github-flavor Markdown](https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax) (often abbreviated as GFM). Most -- though not all -- GFM is supported by MapRoulette. One notable exception: whereas GFM allows some raw HTML, MapRoulette does not.\n\nBelow is screenshot showing some commonly used bits of Markdown on the left, with a preview on the right of how that Markdown will appear to users:",
  "MustacheTagReplacement.content1": "MapRoulette makes it easy to embed the value of task feature properties (or workspace properties) in allowed places, such as challenge instructions or the Custom URLs widget, by surrounding them with double \"mustache tags\" (",
  "MustacheTagReplacement.content2": "and",
  "MustacheTagReplacement.content3": "Any task feature property can be referenced in a mustache tag by the property name, e.g. ",
  "MustacheTagReplacement.content4": "to display the value of the `highway` property. If the property doesn't exist on the task, then the mustache tag will be replaced with empty text.\n\n> Note: when working with Markdown content (such as challenge instructions), the mustache tags get replaced *before* the final content is interpreted as Markdown. That means, for example, that feature property values will be interpreted as Markdown, allowing things like URLs to be converted into clickable links. If you instead wish to see the raw property value, you can surround the whole mustache tag (including the curly braces of the \"mustache\" itself) with single backticks\n\n## Workspace Properties\nSome workspaces, notably Task Completion, make additional properties available for substitution that are specific to the workspace state rather than the task itself. These \"workspace\" properties always begin with a hash (`#`), e.g. `#mapZoom`, to avoid confusion with task feature properties. Workspace properties are always case-sensitive. The following workspace properties may be available (as with task feature properties, mustache tags referencing missing workspace properties will be replaced with empty text):",
  "MustacheTagReplacement.content5": "a WSEN comma-separated bounding box of the current map bounds",
  "MustacheTagReplacement.content5.1": "the longitude of the west side of the current map bounds",
  "MustacheTagReplacement.content6": "the latitude of the south side of the current map bounds",
  "MustacheTagReplacement.content7": "the longitude of the east side of the current map bounds",
  "MustacheTagReplacement.content8": "the latitude of the north side of the current map bounds",
  "MustacheTagReplacement.content9": "the current zoom of the map",
  "MustacheTagReplacement.content10": "The latitude of the map’s current centerpoint",
  "MustacheTagReplacement.content11": "The longitude of the map’s current centerpoint",
  "MustacheTagReplacement.content12": "The type (node/way/relation) of the current task feature if it can be determined",
  "MustacheTagReplacement.content13": "The numerical OSM id of the current task feature if it can be determined",
  "MustacheTagReplacement.content14": "the internal MapRoulette id of the current task (not the OSM id)",
  "NotificationsAndEmail.content1": "You can now get notified of events in MapRoulette that may be important to you. The notifications will show up in the new Inbox that you can find in the user dropdown menu. If you have new notifications, there will be a red dot:\n\n![](notificationsandemail.png =500x)\n\nCurrently, MapRoulette will notify you about the following things:\n\n- **System messages** — important MapRoulette system events, like planned downtime. These will be very infrequent.\n- **Mentions** — Be notified when someone mentions you in a comment.\n- **Accepted** — Be notified when one of your tasks was reviewed and accepted.\n- **Rejected** — Be notified when one of your tasks was reviewed and the reviewer asked you to revise the work.\n- **Revised** — Be notified when one of your tasks was reviewed and accepted, but the reviewer made some OSM edits.\n\nYou can set individual notification preferences for each of these in your User Settings. There are four notification levels:\n\n1. **Ignore** — no notification whatsoever\n2. **Receive but do not email** — you will see the notification in your MapRoulette Inbox, but no emails are sent\n3. **Receive and email immediately** — you will see the notification in your MapRoulette Inbox, and an email will be sent to the address in your User Profile as the event happens\n4. **Receive and email daily** — you will see the notification in your MapRoulette Inbox, and the notification will be added to a daily email digest that will be sent to the address in your User Profile\n\nRight now, MapRoulette does not require email validation, so please make sure that the email address you enter is valid and yours.",
  "PointScoring.content1": "Points are awarded for each task that is completed as follows:\n\n| Completion Status | Points Awarded |\n| ----------------- | :------------: |\n| Fixed             |       5        |\n| Not an Issue      |       3        |\n| Already Fixed     |       3        |\n| Too Hard          |       1        |\n| Skipped           |       0        |",
  "ProjectsAndProjectManagers.content1": "MapRoulette provides lots of project and team tooling for users to collaberate.  One feature that assists with this is the Project Managers widget in the Project overview page.",
  "ProjectsAndProjectManagers.content2": "Here, the creator of a project can designate other users or teams to manage the project or even take a project over.\n\n## Adding a user or team\n\nSimply use the search box to find a user by their OpenStreetMap username.  You can also assign a team.  More about teams [here](documentation/teams/)\n\n## Assigning a user privileges\n\nUsers can be assigned various roles in the project\n\n**Read** - A user will be able to view the project overview page and the challenges under the project\n**Write** - A user will be able to assist with managing of existing challenges and their statuses\n**Admin** - A user will be have complete access to managing, editing, or deleting a project. Users will also be able to remove other managers or change their priviledges.\n\n## Removing a user or team\n\nAn Admin has the ability to remove a user or team from the project.",
  "ProjectsAndProjectManagers.content3": "## Removing an admin\n\nA project always requires at least one admin, so once another user is assigned **Admin**, other admins will be able to be demoted.\n",
  "TagFixChallenges.content1": "[Learn about creating tag fix challenges](https://learn.maproulette.org/en-us/documentation/creating-cooperative-challenges/#creating-tag-fix-challenges)\n\nMapRoulette serves you quick tasks that make it easy for you anyone to find something meaningful to map. The way that worked until now required loading the data related to the Task into JOSM or iD, fixing it there, and returning to MapRoulette to say you fixed it, and then move on.\n\nNow, we’re introducing a new type of Task: the **Tag Fix**. In a Tag Fix Task, MapRoulette will present the suggested fix to you, and all you need to do is click Yes to agree with the fix, and the change will be applied to OSM directly.\n\nLet’s look at an example. Consider this aerial image of a Wendy’s restaurant:",
  "TagFixChallenges.content2": "You can see from the aerial imagery that this restaurant has a `drive_through`: you can see cars snaking around the structure on a dedicated lane.\n\nHowever, this restaurant does not have `drive_through=yes` in OSM. A simple fix that MapRoulette Tag Fixes are ideally suited for.\n\nAs an example, I created a [Tag Fix Challenge](https://maproulette.org/browse/challenges/9411) to add the `drive_through=yes` tag to Wendy’s restaurants that have drive-through lanes but are not tagged as such in OSM yet. When you go to the Challenge and get your first Task, you will see a screen much like this one:",
  "TagFixChallenges.content3": "At the top is the suggested change to OSM tags. By default you only see what will be changed. In this case there is a blue ➕ indicating that a new tag is proposed. You have the option to see all tags as well.\n\nThe Completion options are different. You can click YES to accept the tag change, which will then be applied to OSM. If you click NO, nothing happens and you will be given a new task.\n\nI invite you to try it out and leave feedback here or email at [maproulette@maproulette.org](mailto:maproulette@maproulette.org). Thanks and happy mapping!\n\nFor this to work, MapRoulette needs additional permissions from your OSM account, to modify the map on your behalf. You may need to log out and log back in if you have trouble.",
  "TagFixChallenges.content4": "*I changed the layout for my MapRoulette Task screen to see the most relevant information. [You can do this too]().*",
  "RapidEditor.content1": "In collaberation with our friends over at Rapid, we've integrated a way for you to submit map edits within MapRoulette instead of being directed to a separate application.\n\nThe Rapid Editor is available on most Challenge Task pages.  Simply start a task and within the Map Widget, click on the \"Edit Mode\" toggle.  You'll now be able to make your edit using the widget, without need to go to a separate web page.",
  "RapidEditor.content2": "The Rapid integration will be your default Map widget unless you switch back to \"Classic Mode\".\n\n**Please note the Rapid Editor is currently not available for Cooperative or Tag-fix challenges**",
  "RebuildingChallengeTasks.content1": "As a challenge owner, you may wish to occasionally rebuild the tasks in your challenge with more recent data to add new tasks, update existing ones, and clear out untouched stale ones that no longer need to be addressed.\n\n**In order for your challenge to rebuild successfully, each task feature must contain a supported id field with a unique id (within the challenge) so that existing tasks can be matched up with updated feature data. If tasks aren't matched up properly they will likely be duplicated.**\n\nYou can either explicitly [specify an id property](/documentation/setting-external-task-identifiers) on your challenge, or rely on a supported field/property that will be automatically detected. Automatically supported id fields are: `id`, `@id`, `osmid`, `osm_id`, and `name` (checked in that order). If your features contain one of those automatically-supported fields and you do *not* wish to use it (or the order of detection would pick up the wrong field first), then you must explicitly [specify](/documentation/setting-external-task-identifiers) on the challenge which field/property is to be used.\n\nChallenge tasks generated from Overpass queries automatically contain ids (including exported GeoJSON files from Overpass Turbo), so nothing more is required. But for challenges with tasks generated from other local or remote GeoJSON data, you will need to ensure these ids are included if you wish your challenge to rebuild successfully. Id fields can be on the features themselves (preferable) or the feature properties.\n\nFor example, the following feature representing a museum contains both a field named `id` on the feature and a property named `@id`, either of which will work:",
  "RebuildingChallengeTasks.content2": "**It's important that the same features in your original GeoJSON file and updated GeoJSON file use the same id values so they can be matched up, or you will likely end up with duplicated tasks.**\n\nFor example, if an updated GeoJSON file contained new opening hours for the museum above, the feature in the updated GeoJSON file should contain an id property with the value of `relation/1553447` so that it will be successfully matched with the existing task for the museum and not result in a duplicated task.\n\n## Optionally removing incomplete tasks first\n\nWhen you initiate a Rebuild, you will be presented with a dialog that offers some details about the process along with an option (off by default) to first remove incomplete tasks. This can be useful if your GeoJSON represents the full list of features that still need to be addressed, and you wish to clear out old incomplete tasks that are no longer needed (perhaps they were attended to outside of MapRoulette).\n\nIf you check this option, then incomplete tasks (either untouched or skipped) will first be deleted from the challenge and then recreated as needed based from the latest source data. Tasks in other statuses will not be removed.\n\nIf you leave the option unchecked (the default), then all tasks will simply be left as-is.",
  "ReportingAChallenge.content1": "From time to time, a Challenge is created in MapRoulette that is poorly designed. The instructions may be unclear or even tell mappers to 'fix' the map in a way that goes against OSM best practices and conventions. Bad Challenges have no place in MapRoulette and we want you to be confident that we will deal with them if we need to.\n\nThis page describes the steps you can take to resolve an issue with a MapRoulette Challenge. This process is a lot like the process you would follow when you notice a questionable edit in OSM made outside of MapRoulette. \n\n### 1. Contact the Challenge owner\n\nThe first step is to contact the owner of the Challenge and explain the issue you encountered to them. Most of the time, you can have a constructive dialog with the owner and resolve the issue with them. Remember to assume good intent on the part of the Challenge owner and be respectful in your language.\n\nTo contact the owner, go to any task in the Challenge and click on the three dot menu next to the Challenge name.",
  "ReportingAChallenge.content2": "In the dropdown menu, select 'Contact Challenge Owner'. MapRoulette will then look up the OSM user who created the Challenge, and the link changes to 'Message \\[user] through OSM':",
  "ReportingAChallenge.content3": "Clicking on that item will take you to OSM's native messaging interface, where you can send the Challenge owner a message. The discussion will flow through the OSM messaging system from there on.\n\nIf you can't come to an agreement on how to proceed, the next step is to get in touch with us.\n\n### 2. Comment on the Challenge\n\nYou can raise awareness of a concern or item for a specific challenge using [Challenge Comments](/documentation/challenge-comments).  This feature not only helps create dialogue with the Challenge owner but all interested mappers wanting to assist.\n\n### 3. Challenge Flagging\n\nIf reaching out to the challenge owner is proving unsuccessful, and there is continued concern of a challenge's integrity, please use the [Challenge Flagging](/documentation/challenge-flagging) feature.\n\n### 4. Contact us via email\n\nIf the Challenge owner does not respond in a reasonable time, or you can't come to an agreement on how to proceed, please get in touch with us by sending an email to maproulette@maproulette.org. Please include a link to the offending Challenge in your message, along with a short summary of the issue you encountered and what you have done to try and resolve it. We will then work directly with you and the Challenge owner (if we can reach them) to work it out. \n\nWe hope that with this, we have defined a clear and unambiguous process to deal with Challenges that lead to bad edits in OSM. Thanks for helping to keep MapRoulette a great place to find interesting tasks to help improve OSM!",
  "Reviewing.content1": "As you fix things via MapRoulette, you can indicate that you would like someone else to review your work. Here’s how you do that. When you mark a task as fixed, you will see a new confirmation dialog:",
  "Reviewing.content2": "If you check the box ‘Need an extra set of eyes?’, the task will be added to the review queue. You can also set a global preference in your User Settings to have all your work reviewed by default (you can override it for individual tasks if desired).\n\nIf you are a more experienced mapper, you may volunteer to review the tasks that your fellow mappers have requested to be reviewed. To enable this feature, go into your User Settings and check the box to volunteer as a reviewer.",
  "Reviewing.content3": "Once you’re in, you will see a new item in your user drop down menu.",
  "Reviewing.content4": "Clicking this will take you to the review queue, which you can sort and filter in various ways.",
  "Reviewing.content5": "You can now go in and review single tasks, or add the currently visible list to your review queue.\n\nWhen you review a task, your job is to determine if the mapper solved the task the way they said they would. If it is fixed, you should check if the problem that was described in the task was indeed fixed. If the mapper marked it as Not an Issue or Already Fixed, you should verify that there was in fact not an issue in OSM.\n\nIf the original mapper’s work looks fine, you can Approve the task. You can also make some additional edits to complete or fix the original mapper’s work, and mark the task as Approved (with fixes). Finally, if you want to give the task back to the original mapper, you can Reject the task. Whatever you choose, you can leave a comment that will be visible to the original mapper.",
  "Reviewing.content6": "Especially when you Reject a task, a comment telling the original mapper what they need to improve is very important. If they didn’t fix the Task in the first place, chances are that they won’t be able to fix it a second time without some help!\n\nAs part of the review screen, there are some tools available to you that may come in handy: a link to the change in OSMCha, the option to visualize diffs between changes in Achavi, and the option to pull in the Attic data from Overpass.",
  "SearchboxCommands.content1": "When searching for challenges, the search box supports short-commands that can be used to execute alternative searches or alter search behavior. For example, the map can be instantly relocated to a bounding box or centerpoint (perhaps copied and pasted from another source) -- or to a named geographic region -- rather than having to manually pan and zoom to the target area.\n\n## List of Supported Commands:\n`m/` Move the map to either a WSEN bounding box or a lon,lat centerpoint\n\n`n/` Perform [nominatim](https://nominatim.openstreetmap.org/) search of geographic name and move map to resulting bounds\n\n`p/` Search by project name\n\n\n## Details and Examples\n`m/` Move the map to either a bounding box (west, south, east, north) or a centerpoint (lon, lat)\n\n> Note: if you wish to also filter challenge results geographically, be sure to change your Location filter to \"Intersecting Map Bounds\" or \"Within Map Bounds\" as desired\n\n### Examples:\n\nMove map to WSEN bounding box\n```\nm/-10.9313964,34.2526761,-0.1977539,40.9467136\n```\n\nMove map to lon,lat centerpoint\n```\nm/2.17,41.34\n```\n---\n\n`n/` Perform [nominatim](https://nominatim.openstreetmap.org/) search of geographic name and move map to resulting bounds\n\n> Note: if you wish to also filter challenge results geographically, be sure to change your Location filter to \"Intersecting Map Bounds\" or \"Within Map Bounds\" as desired\n\n### Examples:\nMove map to California\n```\nn/california\n```\n\nMove map to Moscow\n```\nn/moscow\n```\n---\n`p/` performs a case-insensitive search by project name, presenting challenges that are in a project matching (or partially matching) the searched name\n\n### Examples:\nShow challenges in the mvexel project\n```\np/mvexel\n```\n\nShow challenges in projects with \"TIGER\" in their name\n```\np/tiger\n```",
  "SettingBasemapForChallenge.content1": "One of the customizations you can apply to your own Challenges is a custom basemap layer. This basemap layer will override whatever basemap MapRoulette users have defined as their default. This is useful in those cases where you know that a certain basemap is needed to successfully complete the tasks in your Challenge.\n\nAll the default global basemap layers from OSM's [editor layer index](https://github.com/osmlab/editor-layer-index), the same ones that you would find in the iD editor, are available as presets. You can also add your own custom XYZ layer using the common pattern: ",
  "SettingExternalTaskIdentifiers.content1": "When possible, MapRoulette will assign your tasks unique external identifiers based on the fields or properties of their GeoJSON feature. It's common to use OSM ids for this purpose for features that have one. Among other things, using an OSM id allows MapRoulette to pass the id to editors like iD and JOSM so that they can preselect the feature during editing.\n\n> Note: id fields in MapRoulette must always be represented as strings in GeoJSON, even if they are purely numerical\n\nThe name of the feature field or property to be used for this purpose can be specified during challenge creation on the \"OSM/External Id Property\" setting (found in the \"Configure property-based behavior\" section).",
  "SettingExternalTaskIdentifiers.content2": "Be sure that your external ids are **unique for each feature in your data**. It is your responsibility as the challenge creator to ensure this. Task features _missing_ the specified field will be assigned a [random UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) as an external identifier.\n\n> Note: MapRoulette always inspects external identifiers to determine if they match the format of OSM ids before treating them as such, so a UUID will not get treated as an OSM id during task editing or other processes\n\nIf you do not specify which field or property to use during challenge creation, MapRoulette will automatically scan your task features looking for certain special fields and properties to use as a unique external identifier.\n\nMapRoulette looks for external identifiers first on the feature fields and then within the feature's properties. It stops as soon as it finds a matching field or property. It looks for the following, in this order:",
  "SettingExternalTaskIdentifiers.content3": "## Tips for using Non-OSM External Ids\n\nWhile most MapRoulette tasks use OSM ids when specifying external ids, it's possible to provide your own (non-OSM) unique ids instead. Here are some recommendations if you do so:\n\n* Make sure your ids don't look like OSM ids. MapRoulette does not provide a way to distinguish OSM ids from non-OSM ids except by their formatting. For example, MapRoulette itself uses UUIDs if it needs to generate ids. If your ids look like OSM ids, then they may be treated as OSM ids in some situations.\n* Make sure your ids are represented as strings in your GeoJSON. External task ids must be strings in MapRoulette.\n* Do not reuse one of the traditional osm id fields mentioned above (such as `id`). Instead, give your external id field a different name, like `externalId`.\n* Provide the name of your id field on the \"OSM/External Id Property\" setting when setting up your challenge (found in the \"Configure property-based behavior\" section)\n* If you want your external id to show up in the task properties when someone clicks on a task feature, then put your id field inside the feature properties in your GeoJSON. If you do *not* want your id to be displayed in the task properties, then put it on the feature itself in your GeoJSON",
  "SettingExternalTaskIdentifiers.content4": "If none of those are found on either the feature fields or its properties, then a [random UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) is generated and assigned as an external identifier.\n\n> Note: if you subsequently edit your challenge and set (or change) which feature field or property to treat as the OSM id, you must [rebuild your tasks](/documentation/rebuilding-challenge-tasks/) for that change to take effect. As mentioned above, you must be very careful to ensure that each feature will have a unique value for the field/property",
  "SettingExternalTaskIdentifiers.content5": "> Note: A Tag Fix consists of one independent (or parent) operation which includes one or more embedded dependent (or child) operations. Any OSM ids referenced in an operation must be of the form of `elementType/numericId`, e.g. `node/123456789`",
  "SettingYourDefaultOSMEditor.content1": "When you click _Edit_ in a Task, you are sent to an OSM Editor to edit OSM and resolve the task. Everyone has their own preference of OSM Editor, and you can set this preference in your [User Settings](https://maproulette.org/user/profile).",
  "SettingYourDefaultOSMEditor.content2": "The available options are:\n\n- Edit in iD (web editor)\n- Edit in JOSM\n- Edit in new JOSM layer\n- Edit just features in JOSM\n- Edit in Level0\n- Edit in RapiD\n\nNotice that for JOSM, you have three different options. You can load the data within the Task bounding box in the currently active data layer, or in a new data layer every time. Alternatively, you can load only the relevant OSM features, instead of all data in the bounding box.\n\nNote that you don't have to 'save' changes in your user settings, they are applied immediately when you make a change to any of them.\n\nBecause many mappers use different editors based on the task at hand, MapRoulette also lets you set your preferred editor quickly in the Task screen:",
  "SettingYourDefaultOSMEditor.content3": "And finally, regardless of your selected editor, you can always use a [keyboard shortcut](/documentation/using-keyboard-shortcuts/) to open a specific editor during task completion.",
  "SettingYourMapBaseLayer.content1": "Depending on the type of Task and the geographical area you are working on, you may want to use a different base layer for the Task map. You can quickly switch between the available layers right in the Map Widget:",
  "SettingYourMapBaseLayer.content2": "You can set your default choice for your preferred map base layer in your User Settings:",
  "SettingYourMapBaseLayer.content3": "The list of layers is retrieved from the Editor Layer Index, so the options should always be the same as those available from within JOSM and iD.\n\n## Challenge Default\n\nThe creator of the Challenge you work on may set an appropriate base layer for the map, which will be selected by default when you start working on that Challenge. You can still override this in the Map Widget.\n\n## Custom base layers\n\n_Advanced_\n\nIf you have a custom TMS tile layer source you want to use, you can select 'Custom' from the list in your User Settings, and add the layer using the same URL pattern used [in QGIS](https://docs.qgis.org/3.22/en/docs/user_manual/managing_data_source/opening_data.html#using-xyz-tile-services) and [Leaflet](https://leafletjs.com/reference.html#tilelayer), for example:",
  "SolvingMultipleTaskTogether.content1": "Many MapRoulette Challenges have Tasks that are geographically so close together that it is more efficient to solve multiple close Tasks together as if it were one Task. MapRoulette offers a workflow for this since version 3.4.2.\n\nTo use the Multiple Tasks workflow, you need to add the **Multi-Task Work** Widget to your Task screen. To do this, click _Edit Layout_ in the right top corner of your Task screen, and use the _Add Widget_ dropdown menu to add add it to your Layout.",
  "SolvingMultipleTaskTogether.content2": "You may want to [create a separate Layout](/documentation/using-layouts/) just for Multi-Task work to further optimize your mapping workflow. Here's an example where you see the Multi-Task Widget and the regular Map Widget side by side. Such a Layout allows you to see the Task you've been assigned, while at the same time having visibility on other Tasks that are close together:",
  "SolvingMultipleTaskTogether.content3": "The Multi-Task window lets you select multiple tasks either using the Task list or by clicking the markers on the minimap. Here we have a few tasks that are close together selected:",
  "SolvingMultipleTaskTogether.content4": "The Task Completion section will now offer two options, either _Complete Together_ or _Cancel Selection_. If you click _Complete Together_, the Task map will show all the task features that you selected in the Multi-Task Widget, the separate Tasks are now bundled into one Task.",
  "SolvingMultipleTaskTogether.content5": "Solving this Bundled Task works the same as solving a single Task. If you change your mind, the Multi-Task Widget offers the option to Unbundle the Tasks.",
  "StylingTaskFeatures.content1": "MapRoulette offers two different approaches to styling tasks:\n\n1. A subset of the [simplestyle](https://github.com/mapbox/simplestyle-spec/blob/master/1.1.0/README.md) specification can be used to customize the appearance of features within a Task by including special feature properties in your task's GeoJSON\n\n2. Styling rules can be setup in your challenge that style task features based on the values of task properties, such as OSM tags\n\n## Styling tasks directly with GeoJSON properties\n\nTo style tasks via GeoJSON, simply include the simplestyle properties directly on your feature. This provides you with complete flexibility in determining which tasks are to be styled, and how.\n\nThe following simplestyle properties can be used on task features:\n\n| Property         | Description                     | Supported Geometries\n|:-----------------|:--------------------------------|:-----------------------------------\n| stroke           | Outline color                   | LineStrings, Polygons\n| stroke-width     | Thickness of outline            | LineStrings, Polygons\n| stroke-opacity   | Translucency of outline         | LineStrings, Polygons\n| fill             | Fill color (inside the outline) | Polygons\n| fill-opacity     | Translucency of the fill        | Polygons\n| marker-color     | Map marker color                | Points\n| marker-size      | Map marker size                 | Points\n\nSome notes and caveats:\n* colors need to be expressed as [web hex colors](https://en.wikipedia.org/wiki/Web_colors) or (slightly riskier) [common web color names](https://en.wikipedia.org/wiki/Web_colors#X11_color_names)\n* opacities need to be decimal numbers between 0.0 (transparent) and 1.0 (opaque)\n* marker-size must be one of `small`, `medium`, or `large` (medium is the normal size)\n* fill colors can obscure OSM labels, so be careful about high fill-opacity values\n* use of colors used by OSM or MapRoulette to convey special meaning could confuse your mappers\n\n\n### Example\n\nThe following set of properties results in a Way being rendered with a purple stroke (outline) and 50%-opaque fuschia fill, as shown below:\n",
  "StylingTaskFeatures.content2": "## Customizing task styling during challenge setup\n\nOn the \"Configure property-based behavior\" step when creating/editing a challenge, you can choose to customize task property styles. \n\n![](configure_custom_styles.png =544x)\n\nYou'll be presented with the ability to specify one or more task styles that should be applied when a property filter/search matches on a task. In the screenshot below, roads with more than 2 lanes are being setup to be rendered as thick purple lines. You can setup multiple filters with their own styles to capture various scenarios. \n\n![](custom_task_styling.png =1024x)\n\nNote that if a task matches multiple filters -- or if the task also contains simplestyle GeoJSON properties (see above) -- all of the matching styles will be merged and applied.\n\nWhen working on a challenge that has custom styles applied, it may be useful to add the new Feature Style Legend widget to your workspace to serve as a basic reminder of what the custom styles indicate.",
  "StylingTaskFeatures.content3": "## Video\n\nHOT has produced [a video](https://youtu.be/gj8MRgiIV-I?t=849) that goes into styling features in MapRoulette. Check it out!\n",
  "SystemNoticeManagement.content1": "MapRoulette supports the display of system notices -- such as notice of upcoming maintenance -- through a simple external JSON file that can be hosted anywhere (including a GitHub repo). You simply need to specify the URL to the file in the `REACT_APP_SYSTEM_NOTICES_URL` .env configuration variable.\n\nThe JSON file should represent a single object with a top-level `notices` array of notice objects. Any other top-level fields are ignored.\n\nEach notice object should contain a `message` field, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted `expirationTimestamp` field in UTC, and a `uuid` field that uniquely identifies the notice.\n\nExample JSON:",
  "SystemNoticeManagement.content2": "Only future notices are displayed to users, based on each notice's `expirationTimestamp`. Logged-in users are given the option of acknowledging/dismissing each notice, and will not be shown the notice again once acknowledged.\n\nThe message may contain markdown.\n\nIf you are creating a notice by hand, you may wish to take advantage of an online UUID generator such as https://www.guidgenerator.com/online-guid-generator.aspx",
  "TaskAttachments.content1": "MapRoulette offers the ability to attach data to tasks. That data may simply travel along with the task, perhaps to be consumed by external processes, or -- depending on the kind of data -- it may be utilized during task completion to present mappers with additional information or context.\n\nThe initial implementation allows various kinds of data to be attached, but only reference layers (to be shown in JOSM) are specially supported during task completion. Special handling of other kinds of data, such as automatic display of attached street-level imagery, will be coming in future releases.\n\n> Note: the [mr-cli](https://www.npmjs.com/package/@maproulette/mr-cli) command-line utility now provides basic tooling for adding task attachments to your line-by-line GeoJSON files. See its [README](https://www.npmjs.com/package/@maproulette/mr-cli#attaching-data-to-tasks) for usage and examples.\n\n## Adding Attachments\n\nEach GeoJSON Feature (or FeatureCollection) representing a task can have an embedded `attachments` object containing an array of supplemental data attachments. These can include things such as reference layers to display in editors, useful street-level imagery to show to the mapper, or even arbitrary data blobs intended for consumption by external processes.",
  "TaskAttachments.content2": "\nEach attachment in the `attachments` array is a JSON object with a set of fields. The exact fields are flexible and depend on the kind of attachment, but the following fields are always supported (and some required).\n\n### Fields\n**Required Top-Level Fields**\n\nThese fields are always required, regardless of the kind of attachment.\n\n`id`: String containing a unique identifier for the attachment, consisting entirely of [unreserved characters](https://tools.ietf.org/html/rfc3986#section-2.3) from [RFC 3986](https://tools.ietf.org/html/rfc3986). Version 4 [UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) meet these criteria and are highly recommended.\n\n`kind`: String indicating the kind of attachment (reference layer, photo, etc.) The kind tells MR what sort of attachment it's dealing with and determines which other fields are supported and/or required.\n\n`data`: Contains the attachment data, which must be represented as valid JSON, but can be in a different format that has been encoded (e.g. base64). The structure is dependent on the `kind`.\n\n**Other Universal Top-Level Fields**\n\nThese fields are always allowed regardless of the kind of attachment. Some may be required depending on the specified `kind`.\n\n`type`: Specify the type of the data, e.g. `geojson`, `osm`, `gpx`, etc.\n\n`format`: Specify the format of the data, e.g. `xml`.\n\n`encoding`: Specify how the data was encoded, e.g. `base64`.\n\n`name`: A displayable name for this attachment (layer name, file name, etc.)\n\n`settings`: A JSON object with kind-dependent settings that may be used to control how MapRoulette interacts with the attachment.\n\n`purpose`: Optionally indicate how the attachment is intended to be used. This can provide hints to automated and external processes trying to determine if a particular attachment is relevant to them.\n\n`meta`: Reserved for tracking meta information about the attachment, such as data-format version used, timestamps, etc.\n\n\n### Supported Kinds\n\n> Note: some kinds below are shown as \"planned\". They technically can still be used as attachments, but special handling has not yet been implemented (i.e. they will not be made available to the mapper during task completion) and the details are subject to change.\n\n`referenceLayer` *(v3.6.5)*: A reference layer to be shown in editors (depending on editor support) during task completion. GeoJSON, OSM, and GPX layers are supported. `type` should be set to `geojson`, `osm`, or `gpx`. OSM and GPX data must be base64-encoded and should have `format` set to `xml` and encoding set to `base64`. No additional fields are required for GeoJSON. The `data` field should be set to the GeoJSON object or, for OSM and GPX, a string containing the base64-encoded XML data. By default, reference layers are locked in JOSM with no OpenStreetMap upload/download allowed. This behavior can be changed by including a `settings` object on the attachment with `layerLocked`, `uploadPolicy`, and `downloadPolicy` fields set as desired (see JOSM docs for appropriate values).\n\n`referencePhoto` *(planned)*: A photo (or sequence of photos) to be shown in MR during task completion. `type` should be set to either `mapillary` or `openstreetcam`. For Mapillary, `format` should be either `image` or `sequence` and the `data` field should be a string containing the unique Mapillary image or sequence key. For OpenStreetCam the `format` should be `name` and the data should be a string containing the appropriate lth_name (or th_name) for the image.\n\n`referenceData` *(planned)*: A set of key/value pairs to be made available to the mapper in MR during task completion. `format` should be `keyValue` and the data should be JSON representing a flat set of key/value pairs (i.e. no object values).\n\n`blob` *(v3.6.5)*: An arbitrary data attachment that will be ignored by MapRoulette. This can be useful for attaching meta-data to each task that is to be consumed by an external process, perhaps during analysis after a challenge is completed. The data must be embeddable in JSON, so encode if needed. Use of `type`, `format` and `encoding` fields is highly encouraged as needed to identify and process the attached data. Furthermore, a `purpose` field should be used to indicate the intent of the data so that, for example, external processes can identify which blob(s) are relevant to their processing requirements. Even if only one blob of data is attached at challenge creation, it should not be assumed that other blobs won't be attached by other processes later during the task's lifetime.\n\n### Supported Types\n\n`geojson`: GeoJSON data.\n\n`osm`: a JOSM OSM file (must be base64-encoded). `format` should be `xml` and encoding should be `base64`\n\n`gpx`: GPX data (must be base64-encoded). `format` should be `xml` and `encoding` should be `base64`.\n\n`keyValue`: a flat JSON object consisting of key/value pairs (values may not be objects).\n\n\n### Settings\nA kind-specific `settings` object can be provided that controls the interaction between MapRoulette and the attachment. The following settings are supported for each `kind`:\n\n**referenceLayer**\n\n`layerLocked` (boolean) and `downloadPolicy` (string) can be provided to explicitly control how the layer is treated in JOSM (see the [JOSM docs](https://josm.openstreetmap.de/wiki/Help/RemoteControlCommands#import) for details). By default, all reference layers are locked with upload and download policies both set to \"never\", so usually no special settings are needed. The upload policy cannot currently be changed.\n\nExample:",
  "TaskPriorityRules.content1": "Tasks within a challenge can be prioritized by challenge managers as high, medium, or low priority. Available higher priority tasks will generally be served to mappers ahead of lower priority tasks. (See below for details about how rules are applied.)\n\nTasks are prioritized using priority rules that match against either task feature properties (such as OSM tags) or their geographic location. The rules are setup during challenge creation, and can be updated by editing the challenge. Updated rules are immediately reapplied when the edited challenge is saved, but it can take several minutes for that reprioritization process to finish on the server.\n\nIn addition, MapRoulette offers an editable \"default\" priority that will be applied to *any task that does not explicitly match any priority rule group*. That is, tasks that match neither the configured high, medium, nor low priority rule groups will receive the default priority. If no priority rules are setup, then all tasks will receive the default priority.\n\nEach property-based priority rule is setup with a data type, the name of the property to check, a comparison operator, and a desired property value. For example, a rule setup using `string` `building` `equals` `yes` would match tasks with a `building` tag set to `yes`. The available comparison operators will change depending on the type. For example, an `integer` type will have numeric operators like `>` and `<` whereas a `string` type will have textual operators like `equals` and `contains`.\n\nIt is important that the data type on the rule is set correctly for the type of data found on the property.\n\n| Choose    | For                                    |\n|:----------|:---------------------------------------|\n| String    | Text                                   |\n| Integer   | Whole numbers                          |\n| Double    | Decimal numbers                        |\n| Long      | Really big whole numbers (> 4 billion) |\n\nMultiple rules can be setup as a group for a given priority. Those rules are then either ANDed together (*all* rules in the group must positively match a task's properties for the task to be considered a match) or ORed together (*any* rule in the group must positively match a task's properties for the task to be considered a match). Furthermore, rules can be nested for greater granularity by choosing the \"nested rule\" type for a rule.\n\n> Note that if a task matches multiple priority groups, it will be assigned the *highest* matching priority. For example, if it matches both the high-priority and medium-priority rules, it will be assigned high priority\n\n#### Matching Multiple Tag Values with a Single Rule\nIf you want to match a single tag against multiple possible values (such as `highway` equal to either `trunk` or `primary`), one option is to setup a separate rule for each value and then OR them together. But MapRoulette offers a shortcut whereby you can include multiple values separated by commas (e.g. `string` `highway` `equals` `trunk,primary`). When using \"positive\" operators like `equals` or `contains`, the comma-separated values will be OR'd together; when using \"negative\" operators like `doesn't equal` or `doesn't contain` they will be AND'd together (if you require different behavior, then you'll need to fall back to manually setting up separate rules for each value).\n\n#### Location Rules\nMapRoulette also supports location rules, whereby a task can be prioritized based on whether it falls inside or outside of a bounding box/rectangle. Simply choose `location rule` for the type, either `inside` or `outside`, and then either provide the bounding box explicitly as West,South,East,North or else click the Map button and draw the desired rectangle.\n\n#### How Rules Are Applied\nIn general, higher priority tasks will be served to mappers ahead of lower priority tasks. So, until there are no high priority tasks left, mappers working on this challenge will only be served high priority tasks. Then, until there are no normal priority tasks left, mappers will only be served normal priority tasks. Finally, mappers will be served the low priority tasks, until the Challenge's tasks are exhausted.\n\nPlease note that tasks that are marked \"Too Hard\" with higher priority will still be served before any lower priority tasks. The underlying assumption is that a more experienced mapper will still be able to resolve a task that is marked by someone else as \"Too Hard\". We are [revisiting this assumption and considering implementing a feature](https://github.com/osmlab/maproulette3/issues/217) that lets the Challenge author set the number of times a task that is marked \"Too Hard\" is recycled.",
  "Teams.content1": "MapRoulette offers a basic implementation of Teams that makes it possible to group together affiliated users, such as users in a local a mapping club or attendees at a mapathon. Anyone can start a new team and invite other users to join their team.\n\nTeams will likely be enhanced with various features over time, but in v3.6.2 the primary purpose is to make it easier to grant project permissions to groups of users. When permissions are granted to a Team, each member of the team will also be conferred those permissions for as long as they are members of the team.\n\n### Starting a New Team\nTo start a team, go to the Dashboard page and add the Teams widget if you haven't already. Then click the cog icon and choose Start a New Team. Once you've provided a team name and description, and saved your new team, you can click on it and start inviting users to join your team.\n\n> Note: Teams and their membership are public. Private teams are not supported.\n\n### Team Roles\nMembers of teams have roles on the team itself: Admin, Write, or Read. Administrators have full management access to the team: inviting and removing members, editing the team name and description, and even deleting the team. The Read role can be thought of as a \"standard\" member who can see the team and all team members, and is able to leave the team, but otherwise has no management capability. In v3.6.2 the Write role does not confer any additional privilege over the Read role, but it may in future.\n\n> Note that a team member's role only affects their ability to manage the team itself and has no bearing on project permissions conferred to them when a Team is added to a project. All team members are granted the same project permissions through their team regardless of their role on the team.\n\nTeams must have at least one Administrator. If you wish to leave a team you created, you will first need to grant another team member the Admin role if you haven't already.\n\n### Adding a Team to a Project\nThe *Project Managers* widget on the Manage Project page has been enhanced in v3.6.2 to allow Teams to be added to projects. You do not have to be a member of a Team to add it to your project.\n\n> :warning: When you add a Team to a project, you are conferring the chosen project role to every member of the Team, including any future members who may be invited later.\n\nAs before, projects must have at least one user with an Admin role. A Team cannot be the sole administrator of a project.\n\n### Accepting or Declining an Invitation\nHave you been invited to a join a team? Go to your Dashboard, add the Teams widget if you haven't already, and then click the \"...\" control next to the team name to see options for joining the team or declining the invitation. ",
  "UsingKeyboardShortcuts.content1": "A number of keyboard shortcuts are available when completing tasks. The latest shortcuts can always be seen for the current step by expanding the More Options box in the sidebar and then clicking View Keyboard Shortcuts.\n\nAt the time of writing, the following shortcuts are available:",
  "UsingKeyboardShortcuts.content2": "### Confirmation Step\n\n- The comment box will now automatically receive focus so you can immediately begin typing your comment\n- [Shift]-Enter submits confirmation\n\n---\n\n1. shortcut is only available after editing has been initiated\n\n2. shortcut is only available if task has an existing status or is being reviewed by challenge owner",
  "UsingLayouts.content1": "### Widget Workspaces and Dashboards\n\nVarious dashboards and workspaces in MapRoulette -- including the task-completion workspace where mappers complete tasks -- make use of individual **widgets** that can be mixed, matched, added, removed, resized, and reordered to create custom workspace and dashboard layouts. Each widget is represented by a box on the screen that offers specific functionality. Widget layouts can be customized, saved, and named -- with easy switching between them -- and can even be exported and imported to allowing sharing of useful or favorite layouts with others.",
  "UsingLayouts.content2": "_These are all individual widgets. Some are titled while some, such as the Task Map, are not._\n\nIt's hard to create a one-size-fits-all workspace, both in terms of optimizing for screen-size (some users are on 13-inch laptops while others are using 27-inch HiDPI desktop displays or even dual displays) and mapper experience -- expert mappers may wish to see more data and access more advanced functionality that a beginner would find intimidating or even overwhelming. Customizable layouts solve these problems by allowing each mapper to tailor their workspace to their needs, situation, and personal preferences, and even to create multiple layouts for different scenarios (e.g. a laptop layout and a desktop layout).\n\nMapRoulette tends to default to simple layouts suitable for beginners that are comfortable to work with on a 15-inch laptop screen, but still usable on a 13-inch laptop screen.\n\n### Customizing a Layout\n\nLayouts are easy to customize by clicking the \"Edit Layout\" button.",
  "UsingLayouts.content3": "Once clicked, you'll enter a special mode that allows you to move widgets around, add new widgets to the workspace from the \"Add Widget\" menu at the top, remove widgets using the red \"Delete Widget\" control on the top-right of most widgets, and resize widgets by dragging the resize-control found on the bottom-right of each widget. You also can rename your layout to give it a more descriptive name. When you're finished, click the \"Done\" button at the top-right of the workspace.\n\n> Note that some widgets may be required for proper operation of the workspace/dashboard and will not have a Delete control. For example, the Completion widget containing the various task-completion controls is required on the task-completion workspace and does not offer a Delete control",
  "UsingLayouts.content4": "### Adding, Deleting, and Switching between Layouts\n\nBeneath the \"Edit Layout\" button you'll find a dropdown menu that contains additional controls, including options for adding a new layout, switching to a different layout you've previously created, or even deleting the current layout (careful, as this cannot be undone).\n",
  "UsingLayouts.content5": "### Exporting and Importing Layouts\n\nThe Layout dropdown menu (shown above) also contains options for exporting and importing layouts. Exporting allows you to download the layout configuration, which can then later be imported by you or someone else should you choose to send it to them. This can be especially useful for teams or at mapping parties. When you choose to export a layout, you'll be given an option to choose a new name in case something more generic would be more appropriate. The name you provide will be used to initially name the layout when it is later imported. Click the \"Download\" button when you're ready.",
  "UsingLayouts.content6": "Importing works the opposite way: simply click to choose a layout file to upload.",
  "UsingMapillaryImages.content1": "The Mapillary integration shows Mapillary image locations relevant to the task location, and we use the native Mapillary viewer widgets, so you can zoom in and easily skip to the next or previous images in a Mapillary sequence.",
  "UsingMaprouletteTags.content1": "When you complete a task, you can now add a MapRoulette-specific tag to the task. Currently, you cannot search for these tags in MapRoulette, but they do appear in the CSV and GeoJSON task exports the Challenge owner can download. That makes them particularly interesting for Challenge owners. Say, for example, you have a challenge in an area where you know there may not be enough high-quality imagery available for mappers to complete all the tasks successfully. You can ask mappers to add a tag when they encounter that situation, for example `bad-imagery`. Later, when you download the tasks export, you can analyze the tags and find out which areas didn’t have good enough imagery (and start an OpenDroneMap + OpenAerialMap project there 🙂 )",
  "UsingMaprouletteTags.content2": "MR stands for Maproulette, MR Tags are tags that are internal to MapRoulette, and they are used in special cases, and usually the task instructions will tell you when to use them. You can ignore them if not. It lets the creator of the challenge group and filter the tasks users complete in custom ways.",
  "UsingOverpassToCreateChallenges.content1": "Overpass is a powerful query language for OSM. You can ask it things like \"Show me all water fountains in Rome\" or \"Show me banks that are more than 1km away from a police station\".\n\nYou can use Overpass queries directly in MapRoulette to generate tasks when you create a new Challenge. This page is here to help you do this, and avoid common mistakes.\n\n### A simple example\n\nImagine that you want to create a Challenge to have mappers look at bus stop nodes in a certain area. [This Overpass query](http://overpass-turbo.eu/s/Wh4) will give you all `highway=bus_stop` nodes in Salt Lake City:\n\n```\narea[name=\"Salt Lake City\"]->.a;\nnode[highway=bus_stop](area.a);\nout meta;\n```\n\nExplaining the full syntax of Overpass QL (the language this query is written in) is outside the scope of this article. Please look at the [language reference](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL), [examples](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_API_by_Example) and other Overpass related pages on the OSM wiki. OSM user Binette also has some [MapRoulette specific query examples](https://wiki.openstreetmap.org/wiki/User:Binnette/OverpassQueries) on their user page.\n\nYou can plug this query right into MapRoulette when you create a Challenge:",
  "UsingOverpassToCreateChallenges.content2": "After completing the Challenge wizard, your Tasks will reflect the result of the Overpass Query:",
  "UsingOverpassToCreateChallenges.content3": "## Common Pitfalls\n\n### `out center` returns both relations and ways as nodes; use `out geom` instead\n\n`out center` returns the correct coordinates, but instead of relations and ways, nodes are returned. This causes issues with editors because instead of searching for a `way` with `id = 9817324213`, we search for a `node` with `id = 9817324213`. This also causes problems with the MapRoulette maps as a single point will be displayed instead of a linestring.",
  "UsingOverpassToCreateChallenges.content4": "This indicates the currently visible map extent. Overpass Turbo replaces this with the actual longitude / latitude bounds before sending the query to Overpass. If you want to use a query that contains `bbox`, you need to select `Export` > `Query` > `Copy as standalone query` before pasting into MapRoulette.\n\n### Beware of Recursions\n\nOverpass lets you use recursion (`>`) to select all nodes belonging to a way, or all nodes and ways belonging to a relation. If you use recursion in a query to create Tasks in MapRoulette, you will often get more results than you expected. This is because MapRoulette will interpret each separate node as a Task, as well as the Way itself. To avoid this, use `out geom`. So instead of...\n\n```\nway[\"highway\"=\"path\"](40.76,-111.90,40.81,-111.85);\nout body;\n>;\nout skel qt;\n```\n\n... do this:\n\n```\nway[\"highway\"=\"path\"](40.76,-111.90,40.81,-111.85);\nout geom;\n```\n\n### Timeouts\n\nComplex queries or queries that span a large area can take a long time to complete. MapRoulette uses a default query timeout of 180 seconds (3 minutes). This should be enough for most scenarios. If you really need MapRoulette to tell Overpass to wait longer, you can use [Overpass's native `[timeout]` setting](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#timeout:) to override this.\n\n### A word on `out meta`\n\nStrictly speaking, you don't need all OSM metadata to build the tasks. You can just use the `out` statement with no parameters which, according to the documentation, gives you \"all information necessary to use the data\". By using `out meta` you get \"everything output by body for each OSM element, as well as the version, changeset id, timestamp, and the user data of the user that last touched\".",
  "UsingOverpassToCreateChallenges.content6": "> Note: In some situations in the building process, that needs to be further explorted, when building with a way(int) or relation(int), there are some issues. There was a user that tried the 'out' method, and all the ways and relations were dropped from the challenge. Right now i dont think that maproulette supports relations, but building ways can be done by using out geom.",
  "UsingOverpassToCreateChallenges.content5": "_An OSM way imported as a Task using Overpass with full metadata_",
  "VirtualProjects.content1": "Virtual Projects provide a flexible means of loosely organizing disparate Challenges into ad-hoc groupings without having to move the challenges from their original projects. Whereas a challenge can only belong to a single standard project, it can be a member of any number of virtual projects. Anyone can create virtual projects and can add any challenge to their virtual project that is either publicly visible or to which they have at least read access (via permissions on the challenge's standard parent project). The admins of a virtual project can add other members to their virtual project, assigning them Read, Write, or Admin access.\n\n> Note: while you can add existing challenges to virtual projects, you cannot create new challenges within a virtual project. Challenges can only be created in standard projects (but can then be added to virtual projects)\n\nYou can create a Virtual Project just like you would a regular Project. Just indicate that the Project you are creating is a Virtual Project:",
  "VirtualProjects.content2": "Once you have your Virtual Project, you will see the (empty) challenge list in the Project management screen:",
  "VirtualProjects.content3": "Use the 'Manage Challenge List' button in the Challenge List widget to add / remove Challenges from this Virtual Project.",
  "VirtualProjects.content4": "## Roles in Virtual Projects\n\nIt is worth noting that Read/Write/Admin roles in virtual projects only govern the virtual project itself, and **do not** confer any administrative ability over the challenges in the virtual project. For example, a user who does not have write access to a challenge will not suddenly gain write access to it by adding that challenge to a virtual project in which they have do have write access. Challenge administrative permissions are solely governed by the challenge's standard parent project.\n\nHowever, any member of a virtual project will have limited read access to the challenges in that virtual project, even if some of those challenges would not normally be visible to them. For example, they will see the names of those challenges, be able to visit the mapper (not administrative) details page for the challenges, and will be able to see some aggregated data from the challenges such as comments and stats. However, a challenge can only be _added_ to a virtual project by someone who has visibility of the challenge, either because it is public or because they have been explicitly granted read or higher access. **Please be aware that by adding a challenge to a virtual project, you are granting all members of that virtual project limited read access to the challenge.**\n\nMore specifically, the virtual project roles grant the following permissions:\n\n**Read**: user can view the virtual project; can see the challenges in the virtual project, visit the end-user details pages for those challenges to initiate work on them, and see various aggregated data from the challenges such as comments and stats; can see the usernames and roles of other members of the virtual project.\n\n**Write**: all permissions of Read; user can add/remove challenges to/from the virtual project; can edit the name and description of the virtual project itself.\n\n**Admin**: all permissions of Write; user can add/remove users to/from the virtual project and modify their roles.",
  "YourDashboard.content1": "When logging into MapRoulette, you'll be presented with a customizable layout of different widgets that can help you get started on some challenges or see some highlights of your accomplishments and recent contributions.",
  "YourDashboard.content2": "The main dashboard widget will display your current points and leaderboard status, and provides easy access/direction to challenges you've been working on or new challenges that may interest you.\n\nJust like most of the projects, challenges, and task pages, you can customize the layout of your dashboard to make it more personalized.\n",
  "YourDashboard.content3": "Here are a list of different widgets available to you:",
  "YourDashboard.content4": "# Follow",
  "YourDashboard.content5": "Follow allows you to track the activity of other users, add new users to follow, and see who is following you.  You can also control who follows you by blocking users if you choose.\n\nTo follow a new user, click on **Following** at the top of the widget and input a users name.  A dropdown of located users by your input will display and you can click on the user.  The followed user will display on your list and the activity column will update appropriately.  You can also click on their name and view their MapRoulette user page.",
  "YourDashboard.content6": "## Teams\n\nYou can view information on the teams you are working in or create a new team.  More info about Teams [here](/documentation/teams)\n\n## Your Top Challenges\n\nThis widget presents a list of the challenges you've most contributed to.  You have options to configure how far back you'd like the list the challenges.\n\n## Your Favorite Challenges\n\nThis widget presents a list of the challenges you've favorited.  In order to favorite a challenge, go to the Challange's overview page and click **Favorite**.  Favorited challenges will also show up at the top of your Challenge Search list.\n\n{% translate \"YourDashboard.content6\", page.url | getUrlLang %}",
  "YourDashboard.content7": "## Challenge Highlights\n\nThis widget will showcase Challenges that have been labeled **Featured** by an admin, allowing the community more visibility over challenges with a high demand for contribution.  Featured challenges will also show up at the top of your Challenge Search List.",
  "YourDashboard.content8": "## Popular Challenges\n\nChallenges with recent contributions from the community may end up getting labeled **Popular**, and will show up in this widget.\n\n## Tracked Tasks\n\nTasks that you've decided to Track will show up here.  In order to track a task, go to the task page of the task you'd like to track.  Click the gear box on the top right and select **Edit Layout**. Click the **Add Widget** dropdown and select the **More Options** widget.\n\n## Your Recent Contributions\n\nSimilar to the **Follow** widget, where you can view other people's most recent work, this widget shows all of your personal recent contributions on Challenges.",
  "Screencasts.content1": "A collection of Screencasts and Recordings of presentations about MapRoulette.",
  "TranslateDocs.content1": "We need translators to help us make MapRoulette's Documentation available in multiple languages.\n\nJust like the Maproulette site, if you are multi-lingual and would like to contribute, please visit our [Transifex Page](https://explore.transifex.com/maproulette/mr-docs/)",
  "TranslateDocs.content2": "## How Do I Access The Transifex Interface?\n\nSimply go to our [Explore Page](https://explore.transifex.com/maproulette/mr-docs/) and sign up.\n\n## How Do I Request a New Language?\n\nGo to the [Languages Page](https://app.transifex.com/maproulette/mr-docs/languages/) and click **Edit Languages**.  Select the language you wish to add and click **Apply**.",
  "TranslateDocs.content3": "## How Do I Translate?\n\nGo to the [Translate Page](https://app.transifex.com/maproulette/mr-docs/translate) and in the header, select the target language you would like to help translate.",
  "TranslateDocs.content4": "## When Will I See My Contributions on the Documentation Site?\n\nOnce your contributions are submitted and reviewed, the development team will update the translation files of the documentation site.  Typically the deployment cadence is once a month.\n\nYour support is appreciated, as this will create more access to community contribution to MapRoulette."
}
